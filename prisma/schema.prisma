// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider     = "mysql"
  url          = env("DATABASE_URL")
  relationMode = "prisma"
}

enum Role {
  ADMIN
  USER
}

enum Category {
  CARS
  POKEMON
  GENERAL
  SPORTS
  HISTORY
  GEOGRAPHY
  ENTERTAINMENT
  SCIENCE
  ART
  MUSIC
  FILMS
  LITERATURE
  MATHS
  TECHNOLOGY
  ANIMALS
  VEHICLES
  FOOD
  NATURE
  TRAVEL
  POLITICS
  CELEBRITIES
  COMICS
  GAMES
  ANIME
  CARTOONS
}

model Account {
  id                String  @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String? @db.Text
  access_token      String? @db.Text
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String? @db.Text
  session_state     String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
  @@index([userId])
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@index([userId])
}

model User {
  id            String        @id @default(cuid())
  name          String?
  email         String?       @unique
  emailVerified DateTime?
  image         String?
  accounts      Account[]
  sessions      Session[]
  role          Role          @default(USER)
  cheatUsed     Boolean       @default(false)
  cheatUsedAt   DateTime?
  createdAt     DateTime      @default(now())      
  updatedAt     DateTime?      
  totalScore    Int           @default(0)
  UserAnswers   UserAnswers[]
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}
model QuizCategory {
  id            Int       @id @default(autoincrement())
  category      Category  
  basePrompt    String
  sdPrompt      String    @default(" ")
  createdAt     DateTime  @default(now())
  isActive      Boolean   @default(true)
}
model KeywordPrompt {
  id            Int         @id @default(autoincrement())
  keyword       String
  category      Category
  isUsed         Boolean     @default(false)
}

model QuestionData {
  id            Int         @id @default(autoincrement())
  category      Category
  isUsed        Boolean     @default(false)
  createdAt     DateTime    @default(now())
  correctAnswer String
}

model Question {
  id            String        @id @default(cuid())
  category      Category
  isUsed        Boolean       @default(false)
  answer1       String
  answer2       String
  answer3       String
  correctAnswer String
  createdAt     DateTime      @default(now())
  updatedAt     DateTime?      
  dateDue       String
  image         String
}

model UserAnswers {
  id             String       @id @default(cuid())
  userId         String
  questionId     String
  selectedAnswer String
  createdAt      DateTime     @default(now())
  category       Category
  user     User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  @@index([userId])
  @@index([questionId])
}

model Feedback {
  id             Int          @id @default(autoincrement())
  name           String
  email          String
  message        String
  createdAt      DateTime     @default(now())
}
